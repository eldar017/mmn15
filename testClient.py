import socket
import struct
import uuid


def connect_to_server(server_ip, server_port):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((server_ip, server_port))
    return client_socket

def get_public_key():
    with open("public_key.pem", "rb") as pub_file:
        return pub_file.read()

def register_to_server(sock, client_name):
    # No need to send client_id during registration, it's generated by the server.
    version = b'\x01\x00'  # Version 1.0
    code = 1025  # Registration code
    payload_size = 255  # Max name length
    public_key = get_public_key()

    # Constructing the message
    message = struct.pack("<16s2sH", b'\0' * 16, version, code) + struct.pack("<I", payload_size) + client_name.ljust(255, '\0').encode()
    message += public_key
    print(f"Sending message with length: {len(message)}")

    # Send registration request
    sock.sendall(message)

    # Receive response
    response_header = sock.recv(18)  # Expecting 2 bytes for response_code and 16 bytes for client_id
    if len(response_header) != 18:
        print("Unexpected response size from server.")
        return False, None

    response_code, client_id_received = struct.unpack("<H16s", response_header)

    if response_code == 2100:  # Registration successful
        return True, client_id_received
    elif response_code == 2101:  # Registration failed
        return False, None


def main():
    server_ip = '127.0.0.1'
    server_port = 1357

    client_name = input("Enter your client name (max 255 characters): \n")

    with connect_to_server(server_ip, server_port) as sock:
        success, client_id = register_to_server(sock, client_name)
        if success:
            print(f"Registered successfully with ID: {uuid.UUID(bytes=client_id)}")
        else:
            print("Registration failed.")


if __name__ == "__main__":
    main()
